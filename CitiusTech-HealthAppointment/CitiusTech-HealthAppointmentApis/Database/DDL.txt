-- 1. Patients (unchanged, but enriched)
CREATE TABLE Patient (
    patient_id INT IDENTITY PRIMARY KEY,
    full_name NVARCHAR(150) NOT NULL,
    dob DATE NULL,
    gender NVARCHAR(10) NULL,
    email NVARCHAR(150) NULL,
    phone NVARCHAR(50) NULL,
    address NVARCHAR(250) NULL,
    created_at DATETIME2 DEFAULT SYSUTCDATETIME()
);

-- 2. Providers (unchanged)
CREATE TABLE Provider (
    provider_id INT IDENTITY PRIMARY KEY,
    full_name NVARCHAR(150) NOT NULL,
    specialty NVARCHAR(100) NULL,
    contact_email NVARCHAR(150) NULL,
    contact_phone NVARCHAR(50) NULL,
    is_active BIT DEFAULT 1
);

-- 3. Appointment Status lookup (same as before)
CREATE TABLE AppointmentStatus (
    status_id INT PRIMARY KEY,
    status_name NVARCHAR(50) NOT NULL
);
-- Values: (1=Booked, 2=Rescheduled, 3=Cancelled, 4=Completed, 5=NoShow)

-- 4. Appointment Type lookup
CREATE TABLE AppointmentType (
    type_id INT PRIMARY KEY,
    type_name NVARCHAR(50) NOT NULL
);
-- Values: (1=Consultation, 2=Follow-up, 3=Telehealth, 4=Emergency)

-- 5. Appointments (enriched with reminder tracking)
CREATE TABLE Appointment (
    appointment_id INT IDENTITY PRIMARY KEY,
    patient_id INT NOT NULL FOREIGN KEY REFERENCES Patient(patient_id),
    provider_id INT NOT NULL FOREIGN KEY REFERENCES Provider(provider_id),
    start_utc DATETIME2 NOT NULL,
    end_utc DATETIME2 NOT NULL,
    status_id INT NOT NULL FOREIGN KEY REFERENCES AppointmentStatus(status_id),
    type_id INT NOT NULL FOREIGN KEY REFERENCES AppointmentType(type_id),
    notes NVARCHAR(MAX) NULL,
    reminder_sent BIT DEFAULT 0,         -- ✅ for reducing missed appointments
    reminder_sent_at DATETIME2 NULL,
    created_at DATETIME2 DEFAULT SYSUTCDATETIME(),
    updated_at DATETIME2 NULL
);

-- 6. Provider Schedule (availability)
CREATE TABLE ProviderSchedule (
    schedule_id INT IDENTITY PRIMARY KEY,
    provider_id INT NOT NULL FOREIGN KEY REFERENCES Provider(provider_id),
    day_of_week TINYINT NOT NULL, -- 1=Mon ... 7=Sun
    start_time_local TIME NOT NULL,
    end_time_local TIME NOT NULL,
    slot_duration_minutes INT NOT NULL DEFAULT 30
);

-- 7. Provider Exceptions (vacations, training, leave)
CREATE TABLE ProviderException (
    exception_id INT IDENTITY PRIMARY KEY,
    provider_id INT NOT NULL FOREIGN KEY REFERENCES Provider(provider_id),
    start_utc DATETIME2 NOT NULL,
    end_utc DATETIME2 NOT NULL,
    reason NVARCHAR(200) NULL
);

-- 8. Appointment History (tracking reschedules/cancellations)
CREATE TABLE AppointmentHistory (
    history_id INT IDENTITY PRIMARY KEY,
    appointment_id INT NOT NULL FOREIGN KEY REFERENCES Appointment(appointment_id),
    old_start_utc DATETIME2 NULL,
    old_end_utc DATETIME2 NULL,
    old_status_id INT NULL,
    new_start_utc DATETIME2 NULL,
    new_end_utc DATETIME2 NULL,
    new_status_id INT NULL,
    changed_at DATETIME2 DEFAULT SYSUTCDATETIME(),
    changed_by NVARCHAR(150) NULL -- "Patient", "Scheduler"
);

-- 9. Patient Medical History (conditions, treatments, allergies, etc.)
CREATE TABLE PatientHistory (
    history_id INT IDENTITY PRIMARY KEY,
    patient_id INT NOT NULL FOREIGN KEY REFERENCES Patient(patient_id),
    condition NVARCHAR(150) NOT NULL,   -- e.g. "Diabetes", "Hypertension"
    notes NVARCHAR(MAX) NULL,
    diagnosed_on DATE NULL,
    last_updated DATETIME2 DEFAULT SYSUTCDATETIME()
);

-- 10. Patient Risk Factors (structured risk model)
CREATE TABLE PatientRiskFactor (
    risk_id INT IDENTITY PRIMARY KEY,
    patient_id INT NOT NULL FOREIGN KEY REFERENCES Patient(patient_id),
    risk_type NVARCHAR(100) NOT NULL,   -- e.g. "Smoking", "High BMI", "Age > 65"
    risk_level NVARCHAR(50) NOT NULL,   -- Low / Medium / High
    identified_on DATE DEFAULT GETDATE()
);

-- 11. Patient Risk Score (dynamic, predictive)
CREATE TABLE PatientRiskScore (
    score_id INT IDENTITY PRIMARY KEY,
    patient_id INT NOT NULL FOREIGN KEY REFERENCES Patient(patient_id),
    score INT NOT NULL,                 -- numeric score (0-100)
    category NVARCHAR(50) NOT NULL,     -- Low / Medium / High
    reason NVARCHAR(MAX) NULL,          -- e.g. "Frequent no-shows + Hypertension"
    calculated_at DATETIME2 DEFAULT SYSUTCDATETIME()
);

-- 12. Notifications / Reminders (for missed appointment reduction)
CREATE TABLE NotificationLog (
    notification_id INT IDENTITY PRIMARY KEY,
    patient_id INT NOT NULL FOREIGN KEY REFERENCES Patient(patient_id),
    appointment_id INT NULL FOREIGN KEY REFERENCES Appointment(appointment_id),
    channel NVARCHAR(50) NOT NULL, -- e.g., SMS, Email, App
    message NVARCHAR(MAX) NOT NULL,
    sent_at DATETIME2 DEFAULT SYSUTCDATETIME(),
    delivery_status NVARCHAR(50) NULL -- Sent, Failed, Delivered
);

-- 13. Patient Login / Credentials
CREATE TABLE PatientLogin (
    login_id INT IDENTITY PRIMARY KEY,
    patient_id INT NOT NULL FOREIGN KEY REFERENCES Patient(patient_id),
    username NVARCHAR(100) NOT NULL UNIQUE,
    password_hash NVARCHAR(255) NOT NULL,
    password_salt NVARCHAR(255) NULL,
    email NVARCHAR(150) NULL,          -- secondary email for recovery
    phone NVARCHAR(50) NULL,           -- for OTP-based login
    last_login DATETIME2 NULL,
    is_active BIT DEFAULT 1,
    created_at DATETIME2 DEFAULT SYSUTCDATETIME()
);



✅ How This Supports Requirements
1. Reduce Missed Appointments

Appointment.reminder_sent + NotificationLog → ensures every appointment gets tracked for reminders (SMS/Email).

If status = NoShow, this gets logged in history → feeds risk scoring.

2. History of Patient

PatientHistory → stores chronic conditions, past diagnoses.

AppointmentHistory → complete timeline of interactions (missed, rescheduled, completed).

3. Risk Factors + Readmission Prediction

PatientRiskFactor → structured risk entries (smoking, chronic illness, age, etc.).

PatientRiskScore → AI-driven score for likelihood of missed appointments or readmission.

Input for ML model = history of no-shows, appointment gaps, chronic conditions.

Example Queries:

Patients with high missed appointment rate:

SELECT p.full_name, COUNT(*) AS missed_count
FROM Appointment a
JOIN Patient p ON p.patient_id = a.patient_id
WHERE a.status_id = 5 -- NoShow
GROUP BY p.full_name
HAVING COUNT(*) > 3;


Patients high risk of readmission:

SELECT p.full_name, r.score, r.category, r.reason
FROM PatientRiskScore r
JOIN Patient p ON p.patient_id = r.patient_id
WHERE r.category = 'High'
ORDER BY r.score DESC;

